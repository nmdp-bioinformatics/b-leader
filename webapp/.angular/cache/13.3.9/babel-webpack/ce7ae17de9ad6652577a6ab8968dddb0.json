{"ast":null,"code":"/*\n * Copyright (c) 2021 Be The Match.\n *\n * This file is part of BLEAT\n * (see https://github.com/nmdp-bioinformatics/b-leader).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/core/services/bleader/leaderClassification/leader-classification.service\";\nimport * as i2 from \"@app/core/services/import/import.service\";\nimport * as i3 from \"../leader/leader.component\";\nimport * as i4 from \"../allele-autocomplete/allele-autocomplete.component\";\nimport * as i5 from \"@angular/common\";\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"transparent\": a0,\n    \"editing\": a1,\n    \"sharedAllotype1\": a2,\n    \"sharedAllotype2\": a3\n  };\n};\n\nexport let AllotypeComponent = /*#__PURE__*/(() => {\n  class AllotypeComponent {\n    constructor(leaderClassification, importService) {\n      this.leaderClassification = leaderClassification;\n      this.importService = importService;\n      this.allotypeUpdated = new EventEmitter();\n      this.sharedIndex = null;\n      this.importing = false;\n    }\n\n    ngOnInit() {\n      this.importService.importing.subscribe(importing => {\n        this.importing = importing;\n      });\n    }\n\n    getSharedIndex() {\n      if (this.patient && this.subject[\"sharedAllotypeDonor\"]) {\n        const donorAllotypes = this.subject.allotypes.map(a => a.hlaB);\n        const patientAllotypes = this.patient.allotypes.map(a => a.hlaB);\n        const donorSharedIndex = donorAllotypes.indexOf(this.subject[\"sharedAllotypeDonor\"].replace('B*', ''));\n        const patientSharedIndex = patientAllotypes.indexOf(this.subject[\"sharedAllotypePatient\"].replace('B*', ''));\n        const sharedIndex = donorSharedIndex == patientSharedIndex ? donorSharedIndex : donorSharedIndex + 10;\n        return sharedIndex;\n      }\n    }\n\n    updateHlaBLeader($event) {\n      this.formValue = $event;\n\n      if (this._validInput($event)) {\n        this.allotype.hlaB = $event;\n\n        if (!this.importing) {\n          this._classifyLeaderType($event);\n        }\n\n        this.allotype.initiatedCall = true;\n        this.allotypeUpdated.emit();\n      }\n    }\n\n    _validInput(input) {\n      return input.match(/^\\d+:[\\dA-Z][\\dA-Z]+([:\\/][\\dA-Z]+)*$/);\n    }\n\n    _classifyLeaderType(allele) {\n      let classification = this.leaderClassification.classifyLeaderType(allele);\n\n      if (classification) {\n        classification.then(leaderInfo => {\n          this.allotype.submittedHlaB = allele;\n          this.allotype.leader = leaderInfo['common_leader'];\n          this.allotype.exceptions = leaderInfo['exceptions'];\n          this.allotype.unknowns = leaderInfo['unknowns'];\n          this.allotype.known = leaderInfo['known'];\n          this.allotypeUpdated.emit();\n        });\n      }\n    }\n\n  }\n\n  AllotypeComponent.ɵfac = function AllotypeComponent_Factory(t) {\n    return new (t || AllotypeComponent)(i0.ɵɵdirectiveInject(i1.LeaderClassificationService), i0.ɵɵdirectiveInject(i2.ImportService));\n  };\n\n  AllotypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AllotypeComponent,\n    selectors: [[\"app-allotype\"]],\n    inputs: {\n      allotype: \"allotype\",\n      leaderMap: \"leaderMap\",\n      subject: \"subject\",\n      selected: \"selected\",\n      patient: \"patient\",\n      index: \"index\",\n      movedPatientGenotype: \"movedPatientGenotype\"\n    },\n    outputs: {\n      allotypeUpdated: \"allotypeUpdated\"\n    },\n    decls: 2,\n    vars: 14,\n    consts: [[3, \"leaderType\", \"movedPatientGenotype\", \"allotype\", \"transparent\"], [3, \"movedPatientGenotype\", \"ngClass\", \"transparent\", \"allotype\", \"leaderMap\", \"hlaBinput\"]],\n    template: function AllotypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-leader\", 0);\n        i0.ɵɵelementStart(1, \"app-allele-autocomplete\", 1);\n        i0.ɵɵlistener(\"hlaBinput\", function AllotypeComponent_Template_app_allele_autocomplete_hlaBinput_1_listener($event) {\n          return ctx.updateHlaBLeader($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"leaderType\", ctx.allotype.leader)(\"movedPatientGenotype\", ctx.movedPatientGenotype && ctx.subject.type == \"patient\")(\"allotype\", ctx.allotype)(\"transparent\", ctx.selected && ctx.subject.type == \"donor\" && ctx.movedPatientGenotype);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"movedPatientGenotype\", ctx.movedPatientGenotype && ctx.subject.type == \"patient\")(\"ngClass\", i0.ɵɵpureFunction4(9, _c0, ctx.selected && ctx.subject.type == \"donor\" && ctx.movedPatientGenotype, ctx.formValue != ctx.allotype.hlaB, ctx.allotype.hlaB == ctx.allotype.submittedHlaB && ctx.index == 0 && ctx.subject.type == \"patient\" || ctx.allotype.sharedIndex == 0, ctx.allotype.hlaB == ctx.allotype.submittedHlaB && ctx.index == 1 && ctx.subject.type == \"patient\" || ctx.allotype.sharedIndex == 1))(\"transparent\", ctx.selected && ctx.subject.type == \"donor\" && ctx.movedPatientGenotype)(\"allotype\", ctx.allotype)(\"leaderMap\", ctx.leaderMap);\n      }\n    },\n    directives: [i3.LeaderComponent, i4.AlleleAutocompleteComponent, i5.NgClass],\n    styles: [\"[_nghost-%COMP%]{width:100%;float:left;position:relative;-webkit-transition:top .25s ease-out,opacity 1s,background-color 1s;-moz-transition:top .25s ease-out,opacity 1s,background-color 1s}.spine[_ngcontent-%COMP%]{background-color:#000;height:0px;width:169px;position:absolute;top:16px;left:2px;z-index:-1}.editing[_ngcontent-%COMP%]{border-color:orange}\"]\n  });\n  return AllotypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}