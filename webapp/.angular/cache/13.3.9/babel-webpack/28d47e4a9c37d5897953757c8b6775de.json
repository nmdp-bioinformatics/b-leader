{"ast":null,"code":"/*\n * Copyright (c) 2021 Be The Match.\n *\n * This file is part of BLEAT\n * (see https://github.com/nmdp-bioinformatics/b-leader).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/core/services/bleader/leaderMatching/leader-matching.service\";\nimport * as i2 from \"@app/core/services/import/import.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../allotype/allotype.component\";\n\nfunction GenotypeComponent_app_allotype_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-allotype\", 1);\n    i0.ɵɵlistener(\"allotypeUpdated\", function GenotypeComponent_app_allotype_0_Template_app_allotype_allotypeUpdated_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.checkBothAllotypes();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const allotype_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"allotype\", allotype_r1)(\"index\", i_r2)(\"selected\", ctx_r0.selectIndex == ctx_r0.index)(\"patient\", ctx_r0.patient ? ctx_r0.patient.length == 1 ? ctx_r0.patient[0] : ctx_r0.patient[ctx_r0.index] : null)(\"movedPatientGenotype\", ctx_r0.movedPatientGenotype)(\"leaderMap\", ctx_r0.leaderMap)(\"subject\", ctx_r0.subject);\n  }\n}\n\nexport let GenotypeComponent = /*#__PURE__*/(() => {\n  class GenotypeComponent {\n    constructor(leaderMatcher, importService) {\n      this.leaderMatcher = leaderMatcher;\n      this.importService = importService;\n      this.initiatedMatching = new EventEmitter();\n      this.errored = false;\n    }\n\n    ngOnInit() {}\n\n    checkBothAllotypes() {\n      if (this.subject.allotypes.map(allo => allo.hlaB).every(allo => allo != \"\")) {\n        if (this.subject.type == 'donor' && this.patient[0].allotypes[0].hlaB != \"\") {\n          this.subject.loading = true;\n\n          this._retrieveLeaderMatchingResults();\n\n          this.initiatedMatching.emit();\n        }\n      }\n    }\n\n    _retrieveLeaderMatchingResults() {\n      let patient = this.patient.length == 1 ? this.patient[0] : this.patient[this.index];\n\n      if (patient.allotypes[0].hlaB == \"\") {\n        return;\n      }\n\n      const component = this;\n      this.leaderMatcher.getLeaderMatchInfo(patient, [this.subject]).then(leaderMatchInfo => {\n        this.importService.setAsImporting(false);\n        leaderMatchInfo.forEach((subjectInfo, index) => {\n          Object.assign(this.subject, subjectInfo);\n          this.leaderMatcher.assignResults(patient, this.subject, subjectInfo);\n        });\n      }).catch(res => {\n        console.log('TODO: Handle error response');\n\n        if (!component.errored) {\n          // alert(`The back-end server for leader matching is currently down. If this persists, raise an issue at https://github.com/nmdp-bioinformatics/b-leader/issues.`)\n          component.errored = true;\n        }\n\n        console.log(res);\n      });\n    }\n\n  }\n\n  GenotypeComponent.ɵfac = function GenotypeComponent_Factory(t) {\n    return new (t || GenotypeComponent)(i0.ɵɵdirectiveInject(i1.LeaderMatchingService), i0.ɵɵdirectiveInject(i2.ImportService));\n  };\n\n  GenotypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GenotypeComponent,\n    selectors: [[\"app-genotype\"]],\n    inputs: {\n      index: \"index\",\n      patient: \"patient\",\n      subject: \"subject\",\n      subjects: \"subjects\",\n      flippedPatient: \"flippedPatient\",\n      multiple: \"multiple\",\n      matchParadigm: \"matchParadigm\",\n      leaderMap: \"leaderMap\",\n      movedPatientGenotype: \"movedPatientGenotype\",\n      selectIndex: \"selectIndex\"\n    },\n    outputs: {\n      initiatedMatching: \"initiatedMatching\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"allotype\", \"index\", \"selected\", \"patient\", \"movedPatientGenotype\", \"leaderMap\", \"subject\", \"allotypeUpdated\", 4, \"ngFor\", \"ngForOf\"], [3, \"allotype\", \"index\", \"selected\", \"patient\", \"movedPatientGenotype\", \"leaderMap\", \"subject\", \"allotypeUpdated\"]],\n    template: function GenotypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, GenotypeComponent_app_allotype_0_Template, 1, 7, \"app-allotype\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.subject.allotypes);\n      }\n    },\n    directives: [i3.NgForOf, i4.AllotypeComponent],\n    styles: [\"[_nghost-%COMP%]{width:172px;margin:6px 8px 8px;border-radius:1%;position:relative;float:left;-webkit-transition:top .25s ease-out,opacity 1s,color 1s;-moz-transition:top .25s ease-out,opacity 1s,color 1s;-webkit-transition:left .25s ease-out,opacity 1s,color 1s;-moz-transition:left .25s ease-out,opacity 1s,color 1s}.move-to-donor[_nghost-%COMP%]{opacity:1}img[_ngcontent-%COMP%]{height:25px;position:absolute;top:25px;left:-30px}\"]\n  });\n  return GenotypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}