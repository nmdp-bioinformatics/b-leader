{"ast":null,"code":"import { environment } from \"../../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LeaderMatchingService = /*#__PURE__*/(() => {\n  class LeaderMatchingService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = environment.apiUrl + '/b-leader-match/status';\n    }\n\n    getLeaderMatchInfo(patient, donors) {\n      return this.httpClient.post(this.baseURL, this._formatInput(patient, donors)).toPromise().then(res => {\n        return res.map(subjectInfo => {\n          // console.log(subjectInfo)\n          let results = {\n            'id': subjectInfo['hlaB_genotype_donor']['id'],\n            'leaderMatch': subjectInfo['leader_match_status'] ? subjectInfo['leader_match_status'].split('') : [' ', ' ', ' '],\n            'hlaBMatch': subjectInfo['hlaB_genotype_match'] ? subjectInfo['hlaB_genotype_match'].split('') : ['NA', 'NA', 'NA'],\n            'leaderPatient': subjectInfo['leader_genotype_patient'],\n            'leaderDonor': subjectInfo['leader_genotype_donor'],\n            'leaderGenotypePatient': subjectInfo['leader_genotype_patient']['leader_genotype'],\n            'leaderGenotypeDonor': subjectInfo['leader_genotype_donor']['leader_genotype'],\n            'sharedAllotypePatient': subjectInfo['shared_allotype_patient'],\n            'sharedAllotypeDonor': subjectInfo['shared_allotype_donor'],\n            'flippedPatient': subjectInfo['hlaB_genotype_patient'].flip_matched != subjectInfo['hlaB_genotype_patient'].flip_sorted,\n            'flippedDonor': subjectInfo['hlaB_genotype_donor'].flip_matched != subjectInfo['hlaB_genotype_donor'].flip_sorted,\n            'rank': subjectInfo['rank'],\n            'annotated': true\n          };\n\n          if (results['flippedDonor']) {\n            results['hlaBMatch'].reverse();\n          }\n\n          return results;\n        });\n      });\n    }\n\n    assignLeaders(subject, subjectInfo, label) {\n      const indices = ['one', 'two'];\n      const leaderInfo = subjectInfo['leader' + label];\n      const sharedAllotype = subjectInfo['sharedAllotype' + label];\n      const sharedAllotypePatient = label == 'Donor' ? subjectInfo['sharedAllotypePatient'] : null;\n      subject.allotypes.forEach(allo => {\n        allo.submittedHlaB = allo.hlaB;\n      });\n      indices.forEach(index => {\n        const allotype_res = leaderInfo['hla-b_allotype_' + index];\n        const allele = allotype_res['hla-b_allotype']['name'];\n        const allotypes_sub = subject.allotypes.filter(a => a['hlaB'] == allele.replace('B*', ''));\n        let assigned = false;\n        allotypes_sub.forEach(allo => {\n          allo.leader = allotype_res['common_leader'];\n          allo.exceptions = allotype_res['exceptions'];\n          allo.unknowns = allotype_res['unknowns'];\n          allo.known = allotype_res['known'];\n          allo.sharedIndex = null;\n\n          if (allele == sharedAllotype) {\n            if (sharedAllotypePatient && !assigned) {\n              const patientGenotype = indices.map(i => subjectInfo['leaderPatient']['hla-b_genotype']['allotype_' + i].name);\n\n              if (subjectInfo['flippedPatient']) {\n                patientGenotype.reverse();\n              }\n\n              allo.sharedIndex = patientGenotype.indexOf(sharedAllotypePatient);\n              assigned = true;\n            }\n          }\n        });\n      });\n    } // assignSharedAllotype(patient : Subject, donor : Subject, leaderInfo : Object){\n    // }\n\n\n    assignResults(patient, donor, leaderInfo) {\n      this.assignLeaders(patient, leaderInfo, 'Patient');\n      this.assignLeaders(donor, leaderInfo, 'Donor'); // this.assignSharedAllotype(patient, donor, leaderInfo);\n\n      donor['sharedAllotype'] = leaderInfo['sharedAllotypeDonor'];\n      donor.rank = null;\n      donor.loading = false;\n    }\n\n    _formatInput(patient, donors) {\n      return {\n        \"hla-b_genotype_patient\": this._formatGenotypes([patient])[0],\n        \"hla-b_genotype_donors\": this._formatGenotypes(donors)\n      };\n    }\n\n    _formatGenotypes(subjects) {\n      return subjects.filter(sub => sub.allotypes[0].hlaB != \"\" && sub.allotypes[1].hlaB != \"\").map(sub => {\n        return {\n          'id': sub.id,\n          'genotype': sub.allotypes.map(allo => \"B*\" + allo.hlaB).join('+')\n        };\n      });\n    }\n\n  }\n\n  LeaderMatchingService.ɵfac = function LeaderMatchingService_Factory(t) {\n    return new (t || LeaderMatchingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LeaderMatchingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LeaderMatchingService,\n    factory: LeaderMatchingService.ɵfac,\n    providedIn: 'root'\n  });\n  return LeaderMatchingService;\n})();","map":null,"metadata":{},"sourceType":"module"}