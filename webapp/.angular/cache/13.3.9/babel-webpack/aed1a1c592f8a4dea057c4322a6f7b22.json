{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/core/services/bleader/leaderMatching/leader-matching.service\";\nimport * as i2 from \"ngx-filesaver\";\nimport * as i3 from \"@app/core/services/import/import.service\";\nexport let ExportButtonComponent = /*#__PURE__*/(() => {\n  class ExportButtonComponent {\n    constructor(leaderMatchingService, _FileSaverService, importService) {\n      this.leaderMatchingService = leaderMatchingService;\n      this._FileSaverService = _FileSaverService;\n      this.importService = importService;\n      this.interrupted = false;\n    }\n\n    ngOnInit() {}\n\n    numAnnotatedDonors() {\n      return this.donors.filter(d => d.annotated).length;\n    }\n\n    export() {\n      if (this.patient.length > 1 && this.importService.getLimit() == this.numAnnotatedDonors()) {\n        this._getHiddenResults();\n      } else {\n        this._exportSheet();\n      }\n    }\n\n    _getHiddenResults() {\n      for (let i = 0; i < this.donors.length; i++) {\n        let patient = this.patient[i];\n        let donor = this.donors[i];\n\n        if (!donor.annotated) {\n          this.leaderMatchingService.getLeaderMatchInfo(patient, [donor]).then(leaderMatchInfo => {\n            leaderMatchInfo.forEach(subjectInfo => {\n              Object.assign(donor, subjectInfo);\n              patient['leaderGenotype'] = subjectInfo['leaderGenotypePatient'];\n              donor['leaderGenotype'] = subjectInfo['leaderGenotypeDonor'];\n              donor.rank = null;\n\n              if (this.donors.filter(d => !d.annotated).length == 0) {\n                this._exportSheet();\n              } else {\n                this._getHiddenResults();\n              }\n            });\n          }).catch(res => {\n            if (!this.interrupted) {\n              alert(\"The back-end server was interrupted.\" + \" Any completed work will be exported.\");\n\n              this._exportSheet();\n\n              this.interrupted = true;\n            }\n          });\n          return;\n        }\n      }\n    }\n\n    _exportSheet() {\n      const ws = XLSX.utils.aoa_to_sheet(this._formatExport());\n      const csvOutput = XLSX.utils.sheet_to_csv(ws);\n      const fileName = 'b-leader-results-' + this._getTime() + '.csv';\n      const txtBlob = new Blob([csvOutput], {\n        type: 'csv'\n      });\n\n      this._FileSaverService.save(txtBlob, fileName);\n    }\n\n    _getTime() {\n      var today = new Date();\n      return today.getMonth() + 1 + \"-\" + today.getDate() + \"-\" + today.getFullYear() + \"_\" + today.getHours() + \"-\" + today.getMinutes();\n    }\n\n    _formatExport() {\n      let aoa = [['Patient_ID', 'Patient_HLA-B_1', 'Patient_HLA-B_2', 'Donor_ID', 'Donor_HLA-B_1', 'Donor_HLA-B_2', 'Patient_B_Leader_Genotype', 'Donor_B_Leader_Genotype', 'Patient_B_Leader_Unshared', 'Donor_B_Leader_Unshared', 'Shared_B_Leader', 'B_Leader_Match_Status', 'Rank']];\n\n      for (let i = 0; i < this.donors.length; i++) {\n        let index = this.patient.length > 1 ? i : 0;\n        let patient = this.patient[index];\n        let donor = this.donors[i];\n        aoa.push([patient.id, 'B*' + patient.allotypes[0].hlaB, 'B*' + patient.allotypes[1].hlaB, this.donors[i].id, 'B*' + donor.allotypes[0].hlaB, 'B*' + donor.allotypes[1].hlaB, patient.getLeaderAllotypes(), donor.getLeaderAllotypes(), donor.leaderMatch[0], donor.leaderMatch[1], donor.leaderMatch[2], donor.leaderMatch[0] == donor.leaderMatch[1] ? 'matched' : 'mismatched', donor.rank ? donor.rank.toString() : '']);\n      }\n\n      return aoa;\n    }\n\n  }\n\n  ExportButtonComponent.ɵfac = function ExportButtonComponent_Factory(t) {\n    return new (t || ExportButtonComponent)(i0.ɵɵdirectiveInject(i1.LeaderMatchingService), i0.ɵɵdirectiveInject(i2.FileSaverService), i0.ɵɵdirectiveInject(i3.ImportService));\n  };\n\n  ExportButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExportButtonComponent,\n    selectors: [[\"app-export-button\"]],\n    inputs: {\n      patient: \"patient\",\n      donors: \"donors\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"tabindex\", \"-1\", 3, \"disabled\", \"click\"]],\n    template: function ExportButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ExportButtonComponent_Template_button_click_0_listener() {\n          return ctx.export();\n        });\n        i0.ɵɵtext(1, \"Export\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.numAnnotatedDonors() == 0);\n      }\n    },\n    styles: [\"button[_ngcontent-%COMP%]{width:55px;height:20px;margin:5px;font-size:12px;float:left;text-align:center;border:0px}button[_ngcontent-%COMP%]:disabled{background-color:gray}\"]\n  });\n  return ExportButtonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}