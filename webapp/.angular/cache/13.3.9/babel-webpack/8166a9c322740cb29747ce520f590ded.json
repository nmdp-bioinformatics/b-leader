{"ast":null,"code":"/*\n * Copyright (c) 2021 Be The Match.\n *\n * This file is part of BLEAT\n * (see https://github.com/nmdp-bioinformatics/b-leader).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport { EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction AlleleAutocompleteComponent_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵlistener(\"click\", function AlleleAutocompleteComponent_mat_option_6_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onSubmit();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.leaderMap[\"B*\" + option_r2])(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r2, \" \");\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"background-color\": a0,\n    \"color\": a1\n  };\n};\n\nexport let AlleleAutocompleteComponent = /*#__PURE__*/(() => {\n  class AlleleAutocompleteComponent {\n    constructor() {\n      this.hlaBinput = new EventEmitter();\n      this.allotypeForm = new FormControl();\n    }\n\n    onInput(e) {\n      if (e.key === \"Enter\" || e.key === \"Tab\") {\n        this.onSubmit();\n      }\n    }\n\n    ngOnInit() {\n      this.allotypeForm.setValue(this.allotype.hlaB);\n      this.hlaBinput.emit(this.allotypeForm.value);\n\n      this._trackInput();\n\n      this.filteredOptions = this._filterOptions();\n    }\n\n    _trackInput() {\n      this.allotypeForm.valueChanges.subscribe(val => {\n        this.hlaBinput.emit(val);\n      });\n    }\n\n    onSubmit() {\n      this.hlaBinput.emit(this.allotypeForm.value);\n    }\n\n    _filterOptions() {\n      return this.allotypeForm.valueChanges.pipe(startWith(''), map(value => this._filter(value)));\n    }\n\n    _filter(value) {\n      let limit = 50;\n      return Object.keys(this.leaderMap).map(allele => allele.replace('B*', '')).filter(option => option.indexOf(value) == 0).slice(0, limit);\n    }\n\n  }\n\n  AlleleAutocompleteComponent.ɵfac = function AlleleAutocompleteComponent_Factory(t) {\n    return new (t || AlleleAutocompleteComponent)();\n  };\n\n  AlleleAutocompleteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AlleleAutocompleteComponent,\n    selectors: [[\"app-allele-autocomplete\"]],\n    hostBindings: function AlleleAutocompleteComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function AlleleAutocompleteComponent_keydown_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        });\n      }\n    },\n    inputs: {\n      index: \"index\",\n      hlaBallotype: \"hlaBallotype\",\n      leaderMap: \"leaderMap\",\n      transparent: \"transparent\",\n      movedPatientGenotype: \"movedPatientGenotype\",\n      subject: \"subject\",\n      allotype: \"allotype\"\n    },\n    outputs: {\n      hlaBinput: \"hlaBinput\"\n    },\n    decls: 8,\n    vars: 10,\n    consts: [[1, \"prefix\", 3, \"ngClass\"], [\"tabindex\", \"1\", \"type\", \"text\", \"matInput\", \"\", 3, \"ngStyle\", \"formControl\", \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [\"class\", \"options\", 3, \"ngClass\", \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"options\", 3, \"ngClass\", \"value\", \"click\"]],\n    template: function AlleleAutocompleteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1, \"B*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-form-field\");\n        i0.ɵɵelement(3, \"input\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-autocomplete\", null, 2);\n        i0.ɵɵtemplate(6, AlleleAutocompleteComponent_mat_option_6_Template, 2, 3, \"mat-option\", 3);\n        i0.ɵɵpipe(7, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(5);\n\n        i0.ɵɵproperty(\"ngClass\", ctx.allotypeForm.value == ctx.allotype.hlaB ? \"mat-active\" : \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(7, _c0, ctx.transparent ? \"transparent\" : \"white\", ctx.movedPatientGenotype ? \"red\" : \"black\"))(\"formControl\", ctx.allotypeForm)(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 5, ctx.filteredOptions));\n      }\n    },\n    directives: [i1.NgClass, i2.MatFormField, i3.MatInput, i4.DefaultValueAccessor, i5.MatAutocompleteTrigger, i1.NgStyle, i4.NgControlStatus, i4.FormControlDirective, i5.MatAutocomplete, i1.NgForOf, i6.MatOption],\n    pipes: [i1.AsyncPipe],\n    styles: [\"html[_ngcontent-%COMP%]{font-family:Arial;overflow-x:hidden}.T[_ngcontent-%COMP%]{border:1px solid #ffcb88;background-color:#fff;color:#000}.M[_ngcontent-%COMP%]{border:1px solid #9c5494;background-color:#fff;color:#000}.X[_ngcontent-%COMP%]{background-color:gray}h1[_ngcontent-%COMP%]{font-family:Arial;font-size:36}button[_ngcontent-%COMP%]{background-color:#0077c5;color:#fff}button[_ngcontent-%COMP%]:hover{background-color:#2e9ddf}[_nghost-%COMP%]{width:104px;height:28px;font-size:14px;margin-top:2px;float:left;border:1px solid;border-radius:2px;padding-top:2px;padding-left:4px;background-color:#fff;transition:background-color .5s ease-in;font-family:Arial}.sharedAllotype1[_nghost-%COMP%]{background-color:#d2df58}.sharedAllotype2[_nghost-%COMP%]{background-color:#2e9ddf}p[_ngcontent-%COMP%]{height:20px;margin:1px;font-size:12px}span.prefix[_ngcontent-%COMP%]{background-color:#bababa;color:#000;line-height:16px;font-size:9pt;width:12px;height:16px;padding:3px 3px 3px 2px;margin-top:2px;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;float:left;font-size:14px}input[_ngcontent-%COMP%]{height:22px;width:80px;background-color:#fff;box-shadow:inset 1px 1px 1px #a6a6a6;margin-top:-5px;padding-left:2px;float:left}  .mat-form-field-infix{width:80px!important;border-top:1px solid transparent}.mat-active[_ngcontent-%COMP%]{background-color:#fff!important}.options[_ngcontent-%COMP%]{font-size:12px;width:200px}.mat-option[_ngcontent-%COMP%]{height:20px;padding:0 1px}\"]\n  });\n  return AlleleAutocompleteComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}