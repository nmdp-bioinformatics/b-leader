{"ast":null,"code":"import { Subject } from '@app/shared/models/subject/subject.model';\nimport * as i0 from \"@angular/core\";\nexport let SubjectsService = /*#__PURE__*/(() => {\n  class SubjectsService {\n    constructor() {}\n\n    addEmptySubjects(subjects, type, number) {\n      for (let i = 1; i <= number; i++) {\n        const index = this._getAvailableIndex(subjects, type);\n\n        const name = this._getDefaultName(type, index);\n\n        subjects.push(new Subject(['', ''], type, name, index));\n      }\n    }\n\n    _getDefaultName(type, index) {\n      return type[0].toUpperCase() + type.substr(1) + ' #' + (index + 1);\n    }\n\n    _getAvailableIndex(subjects, type) {\n      const indices = subjects.map(s => s.index);\n      const names = subjects.map(s => s.id);\n      let i = 0;\n\n      while (indices.indexOf(i) > -1) {\n        i++;\n      }\n\n      while (names.indexOf(this._getDefaultName(type, i)) > -1) {\n        i++;\n      }\n\n      return i;\n    }\n\n    setDefaults(patient, donors) {\n      // this.removeEmptySubjects(patient);\n      // this.removeEmptySubjects(donors);\n      this.addGenotypes([\"B*07:02+B*40:02\"], patient);\n      this.addGenotypes([// \"B*07:XX+B*40:02\",\n      \"B*07:02+B*35:01\", \"B*08:BETY+B*40:02:01G\", \"B*14:01+B*40:04\", \"B*07:04+B*40:02\", \"B*14:01+B*40:02\", \"B*07:04+B*40:04\", \"B*07:65+B*40:02\", \"B*14:01+B*35:01\", \"B*40:04+B*07:XX\"], donors); // patient[0].id = '259-1259-0';\n      // donors[0].id = '925-3589-1';\n      // donors[1].id = '256-2466-1';\n    }\n\n    addGenotypes(genotypes, subjects) {\n      const type = subjects[0].type;\n      this.removeEmptySubjects(subjects);\n\n      if (genotypes.length) {\n        const existingNum = subjects.length;\n        this.addEmptySubjects(subjects, type, genotypes.length);\n        genotypes.forEach((genotype, index) => {\n          subjects[existingNum + index].setHlaBAllotypes(this._formatGenotypes(genotype));\n        });\n      } else {\n        this.addEmptySubjects(subjects, type, 1);\n      }\n    }\n\n    addIDs(ids, subjects) {\n      for (let i = 0; i < ids.length; i++) {\n        subjects[i].id = ids[i];\n      }\n    }\n\n    _formatGenotypes(genotype) {\n      return genotype.split('+').map(allotype => {\n        if ('B*' == allotype.slice(0, 2)) {\n          return allotype.slice(2);\n        }\n      });\n    }\n\n    removeEmptySubjects(subjects) {\n      subjects.splice(subjects.findIndex(sub => {\n        return this._isEmpty(sub);\n      }));\n\n      if (subjects.filter(sub => this._isEmpty(sub)).length > 0) {\n        this.removeEmptySubjects(subjects);\n      }\n    }\n\n    _isEmpty(subject) {\n      return subject.allotypes[0].hlaB == \"\" && subject.allotypes[1].hlaB == \"\";\n    }\n\n    removeSubject(subjects, index) {\n      let deletedSub = subjects.splice(index, 1)[0];\n      deletedSub.index = index;\n      return deletedSub;\n    }\n\n  }\n\n  SubjectsService.ɵfac = function SubjectsService_Factory(t) {\n    return new (t || SubjectsService)();\n  };\n\n  SubjectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubjectsService,\n    factory: SubjectsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubjectsService;\n})();","map":null,"metadata":{},"sourceType":"module"}