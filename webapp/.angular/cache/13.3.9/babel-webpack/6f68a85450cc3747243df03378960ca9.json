{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable } from '@angular/core';\nimport * as lib from 'papaparse/papaparse.min.js';\nimport * as ɵngcc0 from '@angular/core';\nlet Papa = /*#__PURE__*/(() => {\n  let Papa = class Papa {\n    constructor() {\n      this._papa = lib;\n    }\n    /**\n     * Parse CSV to an array\n     */\n\n\n    parse(csv, config) {\n      return this._papa.parse(csv, config);\n    }\n    /**\n     * Convert an array into CSV\n     */\n\n\n    unparse(data, config) {\n      return this._papa.unparse(data, config);\n    }\n    /**\n     * Set the size in bytes of each file chunk.\n     * Used when streaming files obtained from the DOM that\n     * exist on the local computer. Default 10 MB.\n     */\n\n\n    setLocalChunkSize(value) {\n      this._papa.LocalChunkSize = value;\n    }\n    /**\n     * Set the size in bytes of each remote file chunk.\n     * Used when streaming remote files. Default 5 MB.\n     */\n\n\n    setRemoteChunkSize(value) {\n      this._papa.RemoteChunkSize = value;\n    }\n    /**\n     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.\n     */\n\n\n    setDefaultDelimiter(value) {\n      this._papa.DefaultDelimiter = value;\n    }\n    /**\n     * An array of characters that are not allowed as delimiters.\n     */\n\n\n    get badDelimiters() {\n      return this._papa.BAD_DELIMITERS;\n    }\n    /**\n     * The true delimiter. Invisible. ASCII code 30.\n     * Should be doing the job we strangely rely upon commas and tabs for.\n     */\n\n\n    get recordSeparator() {\n      return this._papa.RECORD_SEP;\n    }\n    /**\n     * Also sometimes used as a delimiting character. ASCII code 31.\n     */\n\n\n    get unitSeparator() {\n      return this._papa.UNIT_SEP;\n    }\n    /**\n     * Whether or not the browser supports HTML5 Web Workers.\n     * If false, worker: true will have no effect.\n     */\n\n\n    get workersSupported() {\n      return this._papa.WORKERS_SUPPORTED;\n    }\n\n  };\n\n  Papa.ɵfac = function Papa_Factory(t) {\n    return new (t || Papa)();\n  };\n\n  Papa.ɵprov = ɵɵdefineInjectable({\n    factory: function Papa_Factory() {\n      return new Papa();\n    },\n    token: Papa,\n    providedIn: \"root\"\n  });\n  return Papa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of papaparse\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Papa }; //# sourceMappingURL=ngx-papaparse.js.map","map":null,"metadata":{},"sourceType":"module"}