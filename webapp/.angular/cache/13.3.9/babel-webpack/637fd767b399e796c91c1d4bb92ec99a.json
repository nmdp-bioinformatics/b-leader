{"ast":null,"code":"/*\n * Copyright (c) 2021 Be The Match.\n *\n * This file is part of BLEAT\n * (see https://github.com/nmdp-bioinformatics/b-leader).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/core/services/bleader/leaderMatching/leader-matching.service\";\nexport let SortButtonComponent = /*#__PURE__*/(() => {\n  class SortButtonComponent {\n    constructor(leaderMatcher) {\n      this.leaderMatcher = leaderMatcher;\n      this.sorting = new EventEmitter();\n    }\n\n    ngOnInit() {}\n\n    sort() {\n      this.sorting.emit(true);\n      this.leaderMatcher.getLeaderMatchInfo(this.patient[0], this.donors).then(leaderMatchInfo => {\n        leaderMatchInfo.forEach((subjectInfo, index) => {\n          Object.assign(this.donors[index], subjectInfo);\n        });\n        this.unsortedRanks = this.donors.map(d => d.rank);\n        this.donors.sort((a, b) => a.rank && !b.rank ? -1 : !a.rank && b.rank ? 1 : a.rank < b.rank ? -1 : a.rank > b.rank ? 1 : 0);\n        this.sorting.emit(false);\n      }).catch(res => {\n        console.log('TODO: Handle error response');\n        console.log(res);\n      });\n    }\n\n    unsort() {\n      let index;\n      this.unsortedRanks.forEach(targetRank => {\n        index = this.donors.indexOf(this.donors.filter(d => d.rank == targetRank)[0]);\n        this.donors.push(this.donors.splice(index, 1)[0]);\n      });\n      delete this.unsortedRanks;\n    }\n\n  }\n\n  SortButtonComponent.ɵfac = function SortButtonComponent_Factory(t) {\n    return new (t || SortButtonComponent)(i0.ɵɵdirectiveInject(i1.LeaderMatchingService));\n  };\n\n  SortButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SortButtonComponent,\n    selectors: [[\"app-sort-button\"]],\n    inputs: {\n      patient: \"patient\",\n      donors: \"donors\"\n    },\n    outputs: {\n      sorting: \"sorting\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"tabindex\", \"4\", 1, \"sort\", 3, \"disabled\", \"click\"]],\n    template: function SortButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function SortButtonComponent_Template_button_click_0_listener() {\n          return ctx.sort();\n        });\n        i0.ɵɵtext(1, \"Sort\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.donors.length <= 1 || ctx.patient.length > 1);\n      }\n    },\n    styles: [\"html[_ngcontent-%COMP%]{font-family:Arial;overflow-x:hidden}.T[_ngcontent-%COMP%]{border:1px solid #ffcb88;background-color:#fff;color:#000}.M[_ngcontent-%COMP%]{border:1px solid #9c5494;background-color:#fff;color:#000}.X[_ngcontent-%COMP%]{background-color:gray}h1[_ngcontent-%COMP%]{font-family:Arial;font-size:36}button[_ngcontent-%COMP%]{background-color:#0077c5;color:#fff}button[_ngcontent-%COMP%]:hover{background-color:#2e9ddf}button[_ngcontent-%COMP%]{width:55px;height:20px;margin:5px;font-size:12px;float:left;text-align:center;border:0px}button[_ngcontent-%COMP%]:disabled{background-color:gray}.sort[_ngcontent-%COMP%]{background-color:#2e9ddf;color:#fff}.unsort[_ngcontent-%COMP%]{background-color:#d2df58;color:#000}\"]\n  });\n  return SortButtonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}